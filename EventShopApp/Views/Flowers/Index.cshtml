@model IEnumerable<EventShopApp.ViewModels.FlowerViewModel>

<h2>Our Flowers</h2>

<div class="flower-list">
    @foreach (var flower in Model)
    {
        <div class="flower-item">
            <a asp-action="Details" asp-route-id="@flower.Id">
                <img src="@flower.FlowerImageUrl" alt="@flower.FlowerType" />
            </a>
            <a asp-action="Details" asp-route-id="@flower.Id">
                <h3>@flower.FlowerType</h3>
            </a>
            <p>@flower.Description</p>
            <p>Price: @flower.Price.ToString("C")</p>

            <!-- Quantity adjustment and action buttons -->
            <div class="quantity-controls">
                <button onclick="adjustQuantity(-1, @flower.Id)">-</button>
                <input type="number" id="quantity-@flower.Id" value="0" min="0" />
                <button onclick="adjustQuantity(1, @flower.Id)">+</button>
            </div>

            <!-- Add to Cart form -->
            <form id="cart-form-@flower.Id" asp-controller="Cart" asp-action="AddToCart" method="post" style="display: none;">
                <input type="hidden" name="Id" value="@flower.Id" />
                <input type="hidden" name="Name" value="@flower.FlowerType" />
                <input type="hidden" name="ImageUrl" value="@flower.FlowerImageUrl" />
                <input type="hidden" name="Price" value="@flower.Price" />
                <input type="hidden" name="Quantity" id="cart-quantity-@flower.Id" value="0" />
                <button type="button" onclick="addToCart(@flower.Id)" class="btn btn-success">Add to Cart</button>
            </form>
        </div>
    }
</div>

<script>
    function adjustQuantity(change, flowerId) {
        // Get quantity input and form elements
        const quantityInput = document.getElementById("quantity-" + flowerId);
        const cartQuantityInput = document.getElementById("cart-quantity-" + flowerId);
        const form = document.getElementById("cart-form-" + flowerId);

        // Adjust quantity value
        let currentQuantity = parseInt(quantityInput.value);
        let newQuantity = currentQuantity + change;

        // Ensure quantity is not negative
        if (newQuantity >= 0) {
            quantityInput.value = newQuantity;
            cartQuantityInput.value = newQuantity;

            // Show or hide form based on quantity
            form.style.display = newQuantity > 0 ? "block" : "none";
        }
    }

    function addToCart(flowerId) {
        const form = document.getElementById("cart-form-" + flowerId);
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Item added to cart successfully!");
                } else {
                    alert("Failed to add item to cart.");
                }
            })
            .catch(error => console.error('Error:', error));
    }
</script>

<style>
    .flower-list {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .flower-item {
        width: 200px;
        text-align: center;
    }

        .flower-item img {
            width: 100%;
            height: auto;
            border-radius: 8px;
        }

    .quantity-controls {
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

        .quantity-controls button {
            width: 30px;
            height: 30px;
        }

    .flower-item input[type="number"] {
        width: 60px;
        text-align: center;
    }
</style>
