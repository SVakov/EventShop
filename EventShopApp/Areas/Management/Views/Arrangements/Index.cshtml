@model IEnumerable<EventShopApp.Models.ArrangementItem>
@using EventShopApp.Data
@using EventShopApp.Enums
@inject IServiceProvider ServiceProvider
@{
    string employeeRole = null;

    if (User.Identity?.IsAuthenticated ?? false)
    {
        var userEmail = User.Identity?.Name;

        using (var scope = ServiceProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var employee = context.Employees.FirstOrDefault(e => e.Email == userEmail);
            employeeRole = employee?.Role.ToString();
        }
    }
}

<h2>Manage Arrangements</h2>

<div class="mb-3">
    <label for="filter">Filter:</label>
    <select id="filter" class="form-select" onchange="applyFilter()">
        <option value="all" @(ViewBag.Filter == "all" ? "selected" : "")>All</option>
        <option value="available" @(ViewBag.Filter == "available" ? "selected" : "")>Available</option>
        <option value="unavailable" @(ViewBag.Filter == "unavailable" ? "selected" : "")>Unavailable</option>
    </select>

    <label for="sortOrder">Sort By:</label>
    <select id="sortOrder" class="form-select" onchange="applyFilter()">
        <option value="price-asc" @(ViewBag.SortOrder == "price-asc" ? "selected" : "")>Price (Low to High)</option>
        <option value="price-desc" @(ViewBag.SortOrder == "price-desc" ? "selected" : "")>Price (High to Low)</option>
        <option value="quantity-asc" @(ViewBag.SortOrder == "quantity-asc" ? "selected" : "")>Quantity (Low to High)</option>
        <option value="quantity-desc" @(ViewBag.SortOrder == "quantity-desc" ? "selected" : "")>Quantity (High to Low)</option>
    </select>
    @if (employeeRole == "Owner" || employeeRole == "Manager")
    {
        <a asp-action="Add" class="btn btn-primary" id="addArrangementButton">+ Add Arrangement</a>
    }
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Quantity</th>
            @if (employeeRole == "Owner" || employeeRole == "Manager")
            {
                <th>Actions</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var arrangement in Model)
        {
            <tr data-arrangement-id="@arrangement.Id">
                <td>@arrangement.ArrangementItemType</td>
                <td>@arrangement.Price.ToString("C")</td>
                <td>@arrangement.ArrangementItemsQuantity</td>
                <td>
                    @if (employeeRole == "Owner" || employeeRole == "Manager")
                    {
                        <button class="btn btn-sm btn-warning" onclick="openEditModal(@arrangement.Id)">Edit</button>
                        @if (arrangement.IsAvailable)
                        {
                            <button class="btn btn-sm btn-danger" onclick="deleteArrangement(@arrangement.Id)">Delete</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-success" onclick="bringBackArrangement(@arrangement.Id)">Bring Back</button>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="modal fade" id="addArrangementModal" tabindex="-1" aria-labelledby="addArrangementModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addArrangementModalLabel">Add Arrangement</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addArrangementForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="arrangementId" />
                    <div class="mb-3">
                        <label for="arrangementType" class="form-label">Name</label>
                        <input type="text" id="arrangementType" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="arrangementPrice" class="form-label">Price</label>
                        <input type="number" id="arrangementPrice" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="arrangementQuantity" class="form-label">Quantity</label>
                        <input type="number" id="arrangementQuantity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="arrangementDescription" class="form-label">Description</label>
                        <textarea id="arrangementDescription" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="arrangementImageUrl" class="form-label">Image URL</label>
                        <input type="url" id="arrangementImageUrl" class="form-control" />
                    </div>
                    <button type="button" class="btn btn-primary" id="saveArrangementButton">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editArrangementModal" tabindex="-1" aria-labelledby="editArrangementModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editArrangementModalLabel">Edit Arrangement</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editArrangementForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="editArrangementId" />
                    <div class="mb-3">
                        <label for="editArrangementPrice" class="form-label">Price</label>
                        <input type="number" id="editArrangementPrice" class="form-control" step="0.01" />
                    </div>
                    <div class="mb-3">
                        <label for="editArrangementQuantity" class="form-label">Quantity</label>
                        <input type="number" id="editArrangementQuantity" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="editArrangementDescription" class="form-label">Description</label>
                        <textarea id="editArrangementDescription" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editArrangementImageUrl" class="form-label">Image URL</label>
                        <input type="url" id="editArrangementImageUrl" class="form-control" />
                    </div>
                    <button type="button" class="btn btn-primary" id="saveEditArrangementButton">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>



<script>
    // Add Arrangement Modal Logic
    document.getElementById("addArrangementButton").addEventListener("click", function () {
        openArrangementModal("Add Arrangement", {});
    });

    // Open the Add/Edit Arrangement Modal
    function openArrangementModal(title, arrangement) {
        document.getElementById("addArrangementModalLabel").textContent = title;
        document.getElementById("arrangementId").value = arrangement.Id || "";
        document.getElementById("arrangementType").value = arrangement.ArrangementItemType || "";
        document.getElementById("arrangementPrice").value = arrangement.Price || "";
        document.getElementById("arrangementQuantity").value = arrangement.ArrangementItemsQuantity || "";
        document.getElementById("arrangementDescription").value = arrangement.Description || "";
        document.getElementById("arrangementImageUrl").value = arrangement.ArrangementItemImageUrl || "";

        const modal = new bootstrap.Modal(document.getElementById("addArrangementModal"));
        modal.show();
    }

    // Edit Arrangement Modal Logic
    function openEditModal(arrangementId) {
        fetch(`/Management/Arrangements/Edit/${arrangementId}`, { method: "GET" })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to fetch arrangement data.");
                }
                return response.json();
            })
            .then(arrangement => {
                document.getElementById("editArrangementId").value = arrangement.id;
                document.getElementById("editArrangementPrice").value = arrangement.price.toFixed(2);
                document.getElementById("editArrangementQuantity").value = arrangement.arrangementItemsQuantity;
                document.getElementById("editArrangementDescription").value = arrangement.description;
                document.getElementById("editArrangementImageUrl").value = arrangement.arrangementItemImageUrl;

                const editModal = new bootstrap.Modal(document.getElementById("editArrangementModal"));
                editModal.show();
            })
            .catch(error => console.error("Error fetching arrangement data:", error));
    }


    // Save New Arrangement
    document.getElementById("saveArrangementButton").addEventListener("click", function () {
        const id = document.getElementById("arrangementId").value;
        const arrangement = {
            Id: id || 0, // Use 0 for new arrangements
            ArrangementItemType: document.getElementById("arrangementType").value,
            Price: parseFloat(document.getElementById("arrangementPrice").value),
            ArrangementItemsQuantity: parseInt(document.getElementById("arrangementQuantity").value, 10),
            Description: document.getElementById("arrangementDescription").value,
            ArrangementItemImageUrl: document.getElementById("arrangementImageUrl").value,
            IsAvailable: true // Default for new arrangements
        };

        const url = id ? `/Management/Arrangements/Edit` : `/Management/Arrangements/Add`;
        const method = "POST";

        fetch(url, {
            method: method,
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(arrangement)
        })
            .then(response => {
                if (response.ok) {
                    location.reload(); // Reload to reflect changes
                } else {
                    return response.json().then(data => {
                        alert("Error: " + (data.errors || "Failed to save arrangement"));
                    });
                }
            })
            .catch(error => console.error("Error saving arrangement:", error));
    });

    document.getElementById("saveEditArrangementButton").addEventListener("click", function () {
        const arrangementId = document.getElementById("editArrangementId").value;
        const updatedArrangement = {
            Id: arrangementId,
            ArrangementItemType: document.querySelector(`tr[data-arrangement-id="${arrangementId}"] td:first-child`).innerText,
            Price: parseFloat(document.getElementById("editArrangementPrice").value),
            ArrangementItemsQuantity: parseInt(document.getElementById("editArrangementQuantity").value, 10),
            Description: document.getElementById("editArrangementDescription").value,
            ArrangementItemImageUrl: document.getElementById("editArrangementImageUrl").value,
            IsAvailable: true
        };

        fetch(`/Management/Arrangements/Edit`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(updatedArrangement)
        })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    return response.json().then(data => {
                        alert("Failed to update the arrangement: " + (data.errors || "Unknown error"));
                    });
                }
            })
            .catch(error => console.error("Error saving arrangement:", error));
    });


    function deleteArrangement(id) {
        if (confirm("Are you sure you want to delete this arrangement?")) {
            fetch(`/Management/Arrangements/Delete/${id}`, {
                method: "POST",
                headers: { "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value }
            })
                .then(response => {
                    if (response.ok) {
                        document.querySelector(`tr[data-arrangement-id="${id}"]`).remove();
                    } else {
                        response.json().then(data => {
                            alert("Failed to delete the arrangement: " + (data.message || "Unknown error"));
                        });
                    }
                })
                .catch(error => console.error("Error deleting arrangement:", error));
        }
    }

    // Bring Back Arrangement
    function bringBackArrangement(id) {
        if (confirm("Are you sure you want to bring back this arrangement?")) {
            fetch(`/Management/Arrangements/BringBack/${id}`, {
                method: "POST",
                headers: { "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value }
            })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert("Failed to bring back the arrangement.");
                    }
                })
                .catch(error => console.error("Error bringing back arrangement:", error));
        }
    }





    // Filtering and sorting logic for arrangements
    function applyFilter() {
        const filter = document.getElementById('filter').value;
        const sortOrder = document.getElementById('sortOrder').value;
        const url = `?filter=${filter}&sortOrder=${sortOrder}`;
        window.location.href = url;
    }
</script>
