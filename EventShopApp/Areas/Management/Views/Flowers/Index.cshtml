@model IEnumerable<EventShopApp.Models.Flower>
@using EventShopApp.Data
@using EventShopApp.Enums
@inject IServiceProvider ServiceProvider

@{
    string employeeRole = null;

    if (User.Identity?.IsAuthenticated ?? false)
    {
        var userEmail = User.Identity?.Name;

        using (var scope = ServiceProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var employee = context.Employees.FirstOrDefault(e => e.Email == userEmail);
            employeeRole = employee?.Role.ToString();
        }
    }
}

<h2>Manage Flowers</h2>

<div class="mb-3">
    <label for="filter">Filter:</label>
    <select id="filter" class="form-select" onchange="applyFilter()">
        <option value="all" @(ViewBag.Filter == "all" ? "selected" : "")>All</option>
        <option value="available" @(ViewBag.Filter == "available" ? "selected" : "")>Available</option>
        <option value="unavailable" @(ViewBag.Filter == "unavailable" ? "selected" : "")>Unavailable</option>
    </select>

    <label for="sortOrder">Sort By:</label>
    <select id="sortOrder" class="form-select" onchange="applyFilter()">
        <option value="price-asc" @(ViewBag.SortOrder == "price-asc" ? "selected" : "")>Price (Low to High)</option>
        <option value="price-desc" @(ViewBag.SortOrder == "price-desc" ? "selected" : "")>Price (High to Low)</option>
        <option value="quantity-asc" @(ViewBag.SortOrder == "quantity-asc" ? "selected" : "")>Quantity (Low to High)</option>
        <option value="quantity-desc" @(ViewBag.SortOrder == "quantity-desc" ? "selected" : "")>Quantity (High to Low)</option>
    </select>
</div>
@if (employeeRole == "Owner" || employeeRole == "Manager")
{
    <a asp-action="Add" class="btn btn-primary" id="addFlowerButton"><strong>+</strong> Add Flower</a>
}


<table class="table">
    <thead>
        <tr>
          
            
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
                @if (employeeRole == "Owner" || employeeRole == "Manager")
                    {
                <th>Actions</th>
                    }
        
           
        </tr>
    </thead>
    <tbody>
        @foreach (var flower in Model)
        {
            <tr data-flower-id="@flower.Id">
                <td>@flower.FlowerType</td>
                <td>@flower.Price.ToString("C")</td>
                <td>@flower.FlowerQuantity</td>
                <td>
                    @if (employeeRole == "Owner" || employeeRole == "Manager")
                    {
                    <button class="btn btn-sm btn-warning" onclick="openEditModal(@flower.Id)">Edit</button>
                    @if (flower.IsAvailable)
                    {
                        <button class="btn btn-sm btn-danger" onclick="deleteFlower(@flower.Id)">Delete</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-success" onclick="bringBackFlower(@flower.Id)">Bring Back</button>
                    }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="flowerModal" tabindex="-1" aria-labelledby="flowerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="flowerModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="flowerForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="flowerId" />
                    <div class="mb-3">
                        <label for="flowerType" class="form-label">Name</label>
                        <input type="text" id="flowerType" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="flowerPrice" class="form-label">Price</label>
                        <input type="number" id="flowerPrice" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="flowerQuantity" class="form-label">Quantity</label>
                        <input type="number" id="flowerQuantity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="flowerDescription" class="form-label">Description</label>
                        <textarea id="flowerDescription" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="flowerImageUrl" class="form-label">Image URL</label>
                        <input type="url" id="flowerImageUrl" class="form-control" />
                    </div>
                    <button type="button" class="btn btn-primary" id="saveFlowerButton">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="editFlowerModal" tabindex="-1" aria-labelledby="editFlowerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editFlowerModalLabel">Edit Flower</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editFlowerForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="editFlowerId" />
                    <div class="mb-3">
                        <label for="editFlowerQuantity" class="form-label">Quantity</label>
                        <input type="number" id="editFlowerQuantity" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="editFlowerDescription" class="form-label">Description</label>
                        <textarea id="editFlowerDescription" class="form-control"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editFlowerImageUrl" class="form-label">Image URL</label>
                        <input type="url" id="editFlowerImageUrl" class="form-control" />
                    </div>
                    <button type="button" class="btn btn-primary" id="saveEditFlowerButton">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById("addFlowerButton").addEventListener("click", function () {
        openFlowerModal("Add Flower", {});
    });

    function openEditModal(flowerId) {
        fetch(`/Management/Flowers/Edit/${flowerId}`, { method: "GET" })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to fetch flower data.");
                }
                return response.json();
            })
            .then(flower => {
                document.getElementById("editFlowerId").value = flower.id;
                document.getElementById("editFlowerQuantity").value = flower.flowerQuantity;
                document.getElementById("editFlowerDescription").value = flower.description;
                document.getElementById("editFlowerImageUrl").value = flower.flowerImageUrl;

                const editModal = new bootstrap.Modal(document.getElementById("editFlowerModal"));
                editModal.show();
            })
            .catch(error => console.error("Error fetching flower data:", error));
    }

    document.getElementById("saveEditFlowerButton").addEventListener("click", function () {
        const flowerId = document.getElementById("editFlowerId").value;
        const updatedFlower = {
            Id: flowerId,
            FlowerType: document.querySelector(`tr[data-flower-id="${flowerId}"] td:first-child`).innerText, 
            FlowerQuantity: parseInt(document.getElementById("editFlowerQuantity").value, 10),
            Description: document.getElementById("editFlowerDescription").value,
            FlowerImageUrl: document.getElementById("editFlowerImageUrl").value,
            Price: parseFloat(document.querySelector(`tr[data-flower-id="${flowerId}"] td:nth-child(2)`).innerText.replace(/[^\d.]/g, "")), 
            IsAvailable: true 
        };

        fetch(`/Management/Flowers/Edit`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(updatedFlower)
        })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    return response.json().then(data => {
                        alert("Failed to update the flower: " + (data.errors || "Unknown error"));
                    });
                }
            })
            .catch(error => console.error("Error saving flower:", error));
    });

    function deleteFlower(id) {
        if (confirm("Are you sure you want to delete this flower?")) {
            fetch(`/Management/Flowers/Delete/${id}`, {
                method: "POST",
                headers: { "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value }
            })
                .then(response => {
                    if (response.ok) {
                        document.querySelector(`tr[data-flower-id="${id}"]`).remove();
                    } else {
                        alert("Failed to delete the flower.");
                    }
                })
                .catch(error => console.error("Error deleting flower:", error));
        }
    }

    function bringBackFlower(id) {
        if (confirm("Are you sure you want to bring back this flower?")) {
            fetch(`/Management/Flowers/BringBack/${id}`, {
                method: "POST",
                headers: { "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value }
            })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert("Failed to bring back the flower.");
                    }
                })
                .catch(error => console.error("Error bringing back flower:", error));
        }
    }

    document.getElementById("saveFlowerButton").addEventListener("click", function () {
        const id = document.getElementById("flowerId").value;
        const flower = {
            Id: id || 0, 
            FlowerType: document.getElementById("flowerType").value,
            Price: parseFloat(document.getElementById("flowerPrice").value),
            FlowerQuantity: parseInt(document.getElementById("flowerQuantity").value, 10),
            Description: document.getElementById("flowerDescription").value,
            FlowerImageUrl: document.getElementById("flowerImageUrl").value,
            IsAvailable: true 
        };

        const url = id ? `/Management/Flowers/Edit` : `/Management/Flowers/Add`;
        const method = "POST";

        fetch(url, {
            method: method,
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(flower)
        })
            .then(response => {
                if (response.ok) {
                    location.reload(); 
                } else {
                    return response.json().then(data => {
                        alert("Error: " + (data.errors || "Failed to save flower"));
                    });
                }
            })
            .catch(error => console.error("Error saving flower:", error));
    });

    function openFlowerModal(title, flower) {
        document.getElementById("flowerModalLabel").textContent = title;
        document.getElementById("flowerId").value = flower.Id || "";
        document.getElementById("flowerType").value = flower.FlowerType || "";
        document.getElementById("flowerPrice").value = flower.Price || "";
        document.getElementById("flowerQuantity").value = flower.FlowerQuantity || "";
        document.getElementById("flowerDescription").value = flower.Description || "";
        document.getElementById("flowerImageUrl").value = flower.FlowerImageUrl || "";

        const modal = new bootstrap.Modal(document.getElementById("flowerModal"));
        modal.show();
    }
    function applyFilter() {
        const filter = document.getElementById('filter').value;
        const sortOrder = document.getElementById('sortOrder').value;
        const url = `?filter=${filter}&sortOrder=${sortOrder}`;
        window.location.href = url; 
    }

</script>
